# -*- coding: utf-8 -*-
"""get_info_by_company.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19OYrxzcuHaEpdFYxa5XoHeLSvtNwp_oo
"""

# First we install the libraries
#!pip install boto3

import boto3
import os
import pandas as pd
import io
import numpy as np
import random

class info_company():
    def return_data_from_company(self,company_name):
      pd.options.mode.chained_assignment = None

      # Important variables
      bucket_name = 'ds4a5-team-50'
      folder_prefix = 'data/raw/'

      # Set up the resources

      s3 = boto3.resource(
              service_name='s3',
              region_name='us-east-1',
              aws_access_key_id='your aws access key',
              aws_secret_access_key='your aws secret key'
          )

      s3c = boto3.client(
              's3', 
              region_name='us-east-1',
              aws_access_key_id='your aws access key',
              aws_secret_access_key='your aws secret key'
          )

      # Lets get the bucket
      bucket = s3.Bucket(bucket_name) 
      response = bucket.objects.filter(Prefix=folder_prefix)

      def get_clean_names(sr_name, rem_punkt=0):                        
          sr_name = sr_name.str.lower()                                 
          if rem_punkt: sr_name = sr_name.str.replace(r'[^\w\s]', '')   
          sr_name = sr_name.str.strip().str.replace(r'\s{2}', '')      
          return sr_name

      def clean_company(company, rem_punkt=0):
        company = company.lower()
        if rem_punkt: company = company.replace(r'[^\w\s]', '')   
        company = company.strip().replace(r'\s{2}', '')
        return company

      #Clean name
      company_name = clean_company(company_name)
      #Download top candidates
      unified_object = s3c.get_object(Bucket=bucket_name, Key='data/preprocessed/00_final_database.csv')
      unified_df = pd.read_csv(io.BytesIO(unified_object['Body'].read()), sep=',', dtype=str)
      unified_df.drop_duplicates(subset=['name'], inplace=True)
      sorted = unified_df.sort_values(by=['score'], ascending=False)
      selected = sorted[['name','score']].iloc[:3]
      company_selected_row = unified_df[unified_df['name'].str.contains(company_name)]
      company_score = company_selected_row['score'].tolist()
      company_score_f = [float(i) for i in company_score]
      company_score_final = np.mean(company_score_f)
      company_employees = company_selected_row['employees'].tolist()
      company_employees_f = [int(i) for i in company_employees]
      company_employees_final = sum(company_employees_f)
      score_comparison = {}
      for index, row in selected.iterrows():
        score_comparison[row['name']] = row['score']
      score_comparison[company_name] = company_score_final
      try:
        company_source_country = company_selected_row['source_country'].tolist()[0]
      except:
        company_source_country = 'Pais origen no definido'
      try:
        company_destination_country = company_selected_row['destination_country'].tolist()[0]
      except:
        company_destination_country = 'Pais destino no definido'
      try:
        company_sector = company_selected_row['sector'].tolist()[0]
      except:
        company_sector = 'Sector no definido'
        
      data_to_return = {}
      data_to_return['puntaje'] = company_score_final
      data_to_return['pais_origen'] = company_source_country
      data_to_return['pais_destino'] = company_destination_country
      data_to_return['sector'] = company_sector
      data_to_return['cantidad_empleados'] = company_employees_final
      data_to_return['comparacion_puntaje'] = score_comparison

      return data_to_return

